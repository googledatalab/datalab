steps:

# Write (and publish) a config_local.js file for this build. This
# can be done in parallel with the rest of the build.
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['cp', 'gs://cloud-datalab/deploy/config_local.js', '/workspace/config_local.js']
  id:   'pullConfigLocal'
- name: 'debian'
  args: ['/workspace/tools/release/generate_config_local.sh',
         '/workspace/config_local.js',
         '/workspace/config_local_${REVISION_ID}.js',
         '${REVISION_ID}']
  id:   'generateConfigLocal'
  waitFor: ['pullConfigLocal']
- name: 'debian'
  args: ['cat', '/workspace/config_local_${REVISION_ID}.js']
  id:   'catConfigLocal'
  waitFor: ['generateConfigLocal']
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['cp',
         '/workspace/config_local_${REVISION_ID}.js',
         'gs://${PROJECT_ID}/builds/config_local_${REVISION_ID}.js']
  id:   'pushConfigLocal'
  waitFor: ['catConfigLocal']

# Push the checked-in version of version-issues.js
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['cp', 'tools/release/version-issues.js', 'gs://cloud-datalab/version-issues.js']
  id:   'pushVersionIssues'

# Validate and push a tarball of the CLI
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: '/usr/bin/env'
  args: ['python', 'tools/cli/tests/end-to-end.py']
  id:   'testCLIpy2'
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: '/usr/bin/env'
  args: ['python3', 'tools/cli/tests/end-to-end.py']
  id:   'testCLIpy3'
  waitFor: ['testCLIpy2']
- name: 'debian'
  args: ['tar', '-cvzf', '/workspace/datalab-cli-${REVISION_ID}.tgz',
         '--transform', 's,^tools/cli,datalab,', 'tools/cli']
  id:   'createTarball'
  waitFor: ['testCLIpy2', 'testCLIpy3']
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['cp',
         '/workspace/datalab-cli-${REVISION_ID}.tgz',
         'gs://${PROJECT_ID}/builds/datalab-cli-${REVISION_ID}.tgz']
  id:   'pushTarball'
  waitFor: ['createTarball']

# Cleanup the temporary files created to push build artifacts to GCS
- name: 'debian'
  args: ['rm', '-rf',
         '/workspace/config_local.js',
         '/workspace/config_local_${REVISION_ID}.js',
         '/workspace/datalab-cli-${REVISION_ID}.tgz']
  id:   'cleanupWorkspace'
  waitFor: ['pushConfigLocal', 'pushTarball']

# Build the base images. These are not pushed externally, but rather
# used the build the final images which are pushed.

## First, we build the non-GPU base image
- name: 'debian'
  args: ['mkdir', '-p', '/workspace/containers/base/pydatalab']
  id:   'makeDir'
  waitFor: ['cleanupWorkspace']
- name: 'gcr.io/cloud-builders/docker'
  args: ['pull', 'ubuntu:16.04']
  id:   'pullUbuntu'
- name: 'gcr.io/cloud-builders/docker'
  args: ['tag', 'ubuntu:16.04', 'datalab-external-base-image']
  id:   'tagUbuntu'
  waitFor: ['pullUbuntu']
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'datalab-base', '/workspace/containers/base/']
  id:   'buildBase'
  waitFor: ['makeDir', 'tagUbuntu']

## Second, we build the GPU base image
- name: 'gcr.io/cloud-builders/docker'
  args: ['pull', 'nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04']
  id:   'pullNvidiaUbuntu'
- name: 'gcr.io/cloud-builders/docker'
  args: ['tag', 'nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04', 'datalab-external-base-image']
  id:   'tagNvidiaUbuntu'
  waitFor: ['buildBase', 'pullNvidiaUbuntu']
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'datalab-core-gpu', '/workspace/containers/base/']
  id:   'buildGpuCore'
  waitFor: ['tagNvidiaUbuntu']
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'datalab-base-gpu', '-f', '/workspace/containers/base/Dockerfile.gpu', '/workspace/containers/base/']
  id:   'buildGpuBase'
  waitFor: ['buildGpuCore']

# Now, build the real images (which we push externally)

## Start with the kernel gateway image...
- name: 'debian'
  args: ['/workspace/containers/gateway/prepare.sh', '${REVISION_ID}']
  id:   'prepareGateway'
  waitFor: ['buildBase']
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/${PROJECT_ID}/datalab-gateway:commit-${REVISION_ID}', '/workspace/containers/gateway/']
  id:   'buildGateway'
  waitFor: ['prepareGateway']

## Then build the non-GPU Datalab image...
- name: 'debian'
  args: ['/workspace/containers/datalab/prepare.sh', 'datalab-base', '${REVISION_ID}']
  id:   'prepareDatalab'
  waitFor: ['buildBase']
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/${PROJECT_ID}/datalab:commit-${REVISION_ID}', '/workspace/containers/datalab/']
  id:   'buildDatalab'
  waitFor: ['prepareDatalab']
- name: 'debian'
  args: ['/workspace/containers/datalab/cleanup.sh']
  id:   'cleanupDatalab'
  waitFor: ['buildDatalab']

## Next, build the GPU Datalab image...
- name: 'debian'
  args: ['/workspace/containers/datalab/prepare.sh', 'datalab-base-gpu', '${REVISION_ID}']
  id:   'prepareDatalabGPU'
  waitFor: ['cleanupDatalab', 'buildGpuBase']
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/${PROJECT_ID}/datalab-gpu:commit-${REVISION_ID}', '/workspace/containers/datalab/']
  id:   'buildDatalabGPU'
  waitFor: ['prepareDatalabGPU']

## Build the mock image used for testing...
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/${PROJECT_ID}/mock-datalab:latest', '/workspace/containers/mock/']
  id:   'buildMockDatalab'

## Tag all of the images as "commit-latest-master-build" so that other processes
## can easily pick up the latest one.
- name: gcr.io/cloud-builders/docker
  args: ['tag', 'gcr.io/${PROJECT_ID}/datalab:commit-${REVISION_ID}', 'gcr.io/${PROJECT_ID}/datalab:commit-latest-master-build']
  waitFor: ['buildDatalab']
  id: 'tagDatalabMasterBuild'
- name: gcr.io/cloud-builders/docker
  args: ['tag', 'gcr.io/${PROJECT_ID}/datalab-gpu:commit-${REVISION_ID}', 'gcr.io/${PROJECT_ID}/datalab-gpu:commit-latest-master-build']
  waitFor: ['buildDatalabGPU']
  id: 'tagDatalabGpuMasterBuild'
- name: gcr.io/cloud-builders/docker
  args: ['tag', 'gcr.io/${PROJECT_ID}/datalab-gateway:commit-${REVISION_ID}', 'gcr.io/${PROJECT_ID}/datalab-gateway:commit-latest-master-build']
  waitFor: ['buildGateway']

## Create the "preview" versions of the `datalab` and `datalab-gpu` images
- name: gcr.io/cloud-builders/docker
  args: ['tag', 'gcr.io/${PROJECT_ID}/datalab:commit-latest-master-build', 'datalab']
  waitFor: [ 'tagDatalabMasterBuild' ]
  id: 'tagDatalab'
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/${PROJECT_ID}/datalab-preview', '-f', '/workspace/containers/datalab/Dockerfile-preview', '/workspace/containers/datalab/']
  id:   'buildDatalabPreview'
  waitFor: ['tagDatalab']
- name: gcr.io/cloud-builders/docker
  args: ['tag', 'gcr.io/${PROJECT_ID}/datalab:commit-latest-master-build', 'datalab']
  waitFor: [ 'tagDatalabGpuMasterBuild', 'buildDatalabPreview' ]
  id: 'tagDatalabGpu'
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/${PROJECT_ID}/datalab-gpu-preview', '-f', '/workspace/containers/datalab/Dockerfile-preview', '/workspace/containers/datalab/']
  waitFor: ['tagDatalabGpu']

## Tag the config local file with latest-master-build as well.
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['cp',
         'gs://${PROJECT_ID}/builds/config_local_${REVISION_ID}.js',
         'gs://${PROJECT_ID}/builds/config_local_latest-master-build.js']
  id:   'pushConfigLocalStatic'
  waitFor: ['pushConfigLocal', 'buildDatalab', 'buildDatalabGPU', 'buildGateway']

images:
  - 'gcr.io/${PROJECT_ID}/mock-datalab:latest'
  - 'gcr.io/${PROJECT_ID}/datalab-gateway:commit-${REVISION_ID}'
  - 'gcr.io/${PROJECT_ID}/datalab:commit-${REVISION_ID}'
  - 'gcr.io/${PROJECT_ID}/datalab-gpu:commit-${REVISION_ID}'
  - 'gcr.io/${PROJECT_ID}/datalab-gateway:commit-latest-master-build'
  - 'gcr.io/${PROJECT_ID}/datalab:commit-latest-master-build'
  - 'gcr.io/${PROJECT_ID}/datalab-gpu:commit-latest-master-build'
  - 'gcr.io/${PROJECT_ID}/datalab-preview'
  - 'gcr.io/${PROJECT_ID}/datalab-gpu-preview'

timeout: '10600s'
